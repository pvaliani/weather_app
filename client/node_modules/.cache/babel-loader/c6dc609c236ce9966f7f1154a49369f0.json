{"ast":null,"code":"var _jsxFileName = \"/Users/pedram/Coding/bezero_weather_app/src/containers/ForecastWeatherContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ForecastWeatherContainer() {\n  _s();\n\n  // Sets state for the current weather object which is an array\n  // also sets state for the location input by the user\n  const [forecastWeather, setForecastWeather] = useState([{}]);\n  const [location, setLocation] = useState(\"\"); // handles the location submitted by the \"as city\" form\n  // invokes the fetch passing the location to getForecastWeatherAsCity\n\n  const handleLocationAsCitySubmit = location => {\n    getForecastWeatherAsCity(location);\n  }; // handles the location submitted by the \"as post code\" form\n  // invokes the fetch passing the location to getForecastWeatherAsPostcode\n\n\n  const handleLocationAsPostcodeSubmit = location => {\n    getForecastWeatherAsPostcode(location);\n  }; // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n\n\n  const getForecastWeatherAsCity = location => {\n    const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\" + location + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setForecastWeather(data);\n    });\n  }; // This is the fetch which provides forecastWeather from the API via location set as post code\n\n\n  const getForecastWeatherAsPostcode = location => {\n    const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\" + location + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setForecastWeather(data);\n    });\n  }; // Format the user input to the form\n  // Pseudocode to format user input for the API\n  // Convert string to lower case\n  // Convert string to array with comma delimiter - .split(“,”)\n  // For each element in the array, get rid of leading and trailing white space - .trim()\n  // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n  // Convert the array back to a string\n\n\n  const formatInput = userInput => {\n    const upperCase = userInput.toUpperCase(); // const inputArray = lowerCase.split(\",\");\n    // const formattedArray = inputArray.map(i => i.trim());\n    // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n\n    const formattedString = upperCase; // // const formattedString = arrayWithUnderscores.toString();\n    // console.log(formattedString);\n\n    return formattedString; // return userInput\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LocationAsCityForm, {\n      handleLocationAsCitySubmit: handleLocationAsCitySubmit,\n      location: location,\n      setLocation: setLocation,\n      formatInput: formatInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LocationAsPostcodeForm, {\n      handleLocationAsPostcodeSubmit: handleLocationAsPostcodeSubmit,\n      location: location,\n      setLocation: setLocation,\n      formatInput: formatInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ForecastWeatherList, {\n      location: location,\n      forecastWeather: forecastWeather.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ForecastWeather, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ForecastWeatherContainer, \"qN0HCeS7TIeQcJF3SJ33rGcFOnE=\");\n\n_c = ForecastWeatherContainer;\nexport default ForecastWeatherContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastWeatherContainer\");","map":{"version":3,"sources":["/Users/pedram/Coding/bezero_weather_app/src/containers/ForecastWeatherContainer.js"],"names":["useState","useEffect","ForecastWeather","ForecastWeatherList","LocationAsCityForm","LocationAsPostcodeForm","ForecastWeatherContainer","forecastWeather","setForecastWeather","location","setLocation","handleLocationAsCitySubmit","getForecastWeatherAsCity","handleLocationAsPostcodeSubmit","getForecastWeatherAsPostcode","url","console","log","fetch","then","res","json","data","formatInput","userInput","upperCase","toUpperCase","formattedString"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,sBAAP,MAAmC,sCAAnC;;;;AAEA,SAASC,wBAAT,GAAmC;AAAA;;AAE/B;AACA;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAtD;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC,CAL+B,CAQ/B;AACA;;AACA,QAAMW,0BAA0B,GAAIF,QAAD,IAAc;AAC7CG,IAAAA,wBAAwB,CAACH,QAAD,CAAxB;AACH,GAFD,CAV+B,CAc/B;AACA;;;AACA,QAAMI,8BAA8B,GAAGJ,QAAD,IAAc;AAChDK,IAAAA,4BAA4B,CAACL,QAAD,CAA5B;AACH,GAFD,CAhB+B,CAoB/B;;;AACA,QAAMG,wBAAwB,GAAIH,QAAD,IAAc;AAC/C,UAAMM,GAAG,GAAG,wDAAsDN,QAAtD,GAA+D,uCAA3E;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUF,GAAtB;AAEAG,IAAAA,KAAK,CAACH,GAAD,CAAL,CACKI,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV;AACAd,MAAAA,kBAAkB,CAACc,IAAD,CAAlB;AACH,KALL;AAOC,GAZD,CArB+B,CAmC9B;;;AACA,QAAMR,4BAA4B,GAAIL,QAAD,IAAc;AAChD,UAAMM,GAAG,GAAG,+DAA6DN,QAA7D,GAAsE,uCAAlF;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUF,GAAtB;AAEAG,IAAAA,KAAK,CAACH,GAAD,CAAL,CACKI,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV;AACAd,MAAAA,kBAAkB,CAACc,IAAD,CAAlB;AACH,KALL;AAOC,GAZJ,CApC8B,CAmD/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,WAAW,GAAIC,SAAD,IAAe;AAC/B,UAAMC,SAAS,GAAGD,SAAS,CAACE,WAAV,EAAlB,CAD+B,CAE/B;AACA;AACA;;AACA,UAAMC,eAAe,GAAGF,SAAxB,CAL+B,CAM/B;AACA;;AACA,WAAOE,eAAP,CAR+B,CAS/B;AACH,GAVD;;AAaA,sBACI;AAAA,4BAEA,QAAC,kBAAD;AACA,MAAA,0BAA0B,EAAEhB,0BAD5B;AAEA,MAAA,QAAQ,EAAEF,QAFV;AAGA,MAAA,WAAW,EAAEC,WAHb;AAIA,MAAA,WAAW,EAAEa;AAJb;AAAA;AAAA;AAAA;AAAA,YAFA,eASA,QAAC,sBAAD;AACA,MAAA,8BAA8B,EAAEV,8BADhC;AAEA,MAAA,QAAQ,EAAEJ,QAFV;AAGA,MAAA,WAAW,EAAEC,WAHb;AAIA,MAAA,WAAW,EAAEa;AAJb;AAAA;AAAA;AAAA;AAAA,YATA,eAiBA,QAAC,mBAAD;AACA,MAAA,QAAQ,EAAEd,QADV;AAEA,MAAA,eAAe,EAAEF,eAAe,CAACe;AAFjC;AAAA;AAAA;AAAA;AAAA,YAjBA,eAsBA,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAtBA;AAAA,kBADJ;AA6BH;;GArGQhB,wB;;KAAAA,wB;AAwGT,eAAeA,wBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\n\nfunction ForecastWeatherContainer(){\n\n    // Sets state for the current weather object which is an array\n    // also sets state for the location input by the user\n    const [forecastWeather, setForecastWeather] = useState([{}]);\n    const [location, setLocation] = useState(\"\");\n\n    \n    // handles the location submitted by the \"as city\" form\n    // invokes the fetch passing the location to getForecastWeatherAsCity\n    const handleLocationAsCitySubmit = (location) => {\n        getForecastWeatherAsCity(location);\n    } \n\n    // handles the location submitted by the \"as post code\" form\n    // invokes the fetch passing the location to getForecastWeatherAsPostcode\n    const handleLocationAsPostcodeSubmit= (location) => {\n        getForecastWeatherAsPostcode(location);\n    } \n\n    // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n    const getForecastWeatherAsCity = (location) => {\n    const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n\n    console.log(\"Url: \" + url);\n    \n    fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            // console.log(data);\n            setForecastWeather(data);\n        })\n\n    }\n\n     // This is the fetch which provides forecastWeather from the API via location set as post code\n     const getForecastWeatherAsPostcode = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                setForecastWeather(data);\n            })\n    \n        }\n\n\n    // Format the user input to the form\n    // Pseudocode to format user input for the API\n    // Convert string to lower case\n    // Convert string to array with comma delimiter - .split(“,”)\n    // For each element in the array, get rid of leading and trailing white space - .trim()\n    // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n    // Convert the array back to a string\n    \n    const formatInput = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        // const inputArray = lowerCase.split(\",\");\n        // const formattedArray = inputArray.map(i => i.trim());\n        // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n        const formattedString = upperCase;\n        // // const formattedString = arrayWithUnderscores.toString();\n        // console.log(formattedString);\n        return formattedString;\n        // return userInput\n    }\n\n\n    return(\n        <>\n     \n        <LocationAsCityForm \n        handleLocationAsCitySubmit={handleLocationAsCitySubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsPostcodeForm \n        handleLocationAsPostcodeSubmit={handleLocationAsPostcodeSubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n        \n        {/* Passes the array associated with the data key to currentWeatherList as props */}\n        <ForecastWeatherList \n        location={location}\n        forecastWeather={forecastWeather.data}\n        />\n\n        <ForecastWeather />\n\n        </>\n    )\n\n\n}\n\n\nexport default ForecastWeatherContainer;"]},"metadata":{},"sourceType":"module"}