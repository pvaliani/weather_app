{"ast":null,"code":"import _slicedToArray from\"/Users/pedram/Coding/bezero_weather_app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import CurrentWeatherList from\"../components/CurrentWeatherList\";import ForecastWeather from\"../components/ForecastWeather\";import ForecastWeatherList from\"../components/ForecastWeatherList\";import LocationAsCityForm from\"../components/LocationAsCityForm\";import LocationAsPostcodeForm from\"../components/LocationAsPostcodeForm\";import{Divider}from'semantic-ui-react';import{getWeathers,postWeather}from\"../WeatherService\";import WeatherGrid from\"../components/WeatherGrid\";import LocationAsLatLonForm from\"../components/LocationAsLatLonForm\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CurrentWeatherContainer(){// Sets state for the current weather object which is an array\n// also sets state for the location input by the user\nvar _useState=useState([{}]),_useState2=_slicedToArray(_useState,2),currentWeather=_useState2[0],setCurrentWeather=_useState2[1];var _useState3=useState([{}]),_useState4=_slicedToArray(_useState3,2),forecastWeather=_useState4[0],setForecastWeather=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),location=_useState6[0],setLocation=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),weatherSaves=_useState8[0],setWeatherSaves=_useState8[1];// add a weatherSave object after setting the state of an array to hold\n// the user search\nvar addWeatherSave=function addWeatherSave(weatherSave){var temp=weatherSaves.map(function(s){return s;});temp.push(weatherSave);setWeatherSaves(temp);};// remove a weatherSave object after setting the state of an array to hold\n// the user search\nvar removeWeatherSave=function removeWeatherSave(id){var temp=weatherSaves.map(function(s){return s;});var indexToDel=temp.map(function(s){return s._id;}).indexOf(id);console.log(indexToDel);temp.splice(indexToDel,1);setWeatherSaves(temp);};// Trigger a re-render when weather objects from the database need to appear on the front end view\nuseEffect(function(){getWeathers().then(function(allWeathers){setWeatherSaves(allWeathers);});},[]);// handles the location submitted by the \"as city\" form\n// invokes the fetch passing the location to getCurrentWeatherAsCity\nvar handleLocationAsCitySubmit=function handleLocationAsCitySubmit(location){getCurrentWeatherAsCity(location);getForecastWeatherAsCity(location);};// handles the location submitted by the \"as post code\" form\n// invokes the fetch passing the location to getCurrentWeatherAsPostcode\nvar handleLocationAsPostcodeSubmit=function handleLocationAsPostcodeSubmit(location){getCurrentWeatherAsPostcode(location);getForecastWeatherAsPostcode(location);};// handles the location submitted by the \"as lat/lon\" form\n// invokes the fetch passing the location to getCurrentWeatherAsPostcode\nvar handleLocationAsLatLonSubmit=function handleLocationAsLatLonSubmit(location){getCurrentWeatherAsLatLon(location);getForecastWeatherAsLatLon(location);};// This is the fetch which provides currentWeather by city from the API via location which will be input by the user\nvar getCurrentWeatherAsCity=function getCurrentWeatherAsCity(location){var url=\"https://api.weatherbit.io/v2.0/current?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\";fetch(url).then(function(res){return res.json();}).then(function(data){setCurrentWeather(data);// once we have the data from the fetch post this \n// to the back end\npostWeather(data).then(function(returnedData){addWeatherSave(returnedData);});});};// This is the fetch which provides currentWeather from the API via location which will be input by the user as Lat/Lon\nvar getCurrentWeatherAsLatLon=function getCurrentWeatherAsLatLon(location){var inputArray=location.split(\",\");var url=\"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\";fetch(url).then(function(res){return res.json();}).then(function(data){setCurrentWeather(data);// once we have the data from the fetch post this \n// to the back end\npostWeather(data).then(function(returnedData){addWeatherSave(returnedData);});});};// This is the fetch which provides currentWeather from the API via location set as post code\nvar getCurrentWeatherAsPostcode=function getCurrentWeatherAsPostcode(location){var url=\"https://api.weatherbit.io/v2.0/current?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\";fetch(url).then(function(res){return res.json();}).then(function(data){setCurrentWeather(data);postWeather(data).then(function(returnedData){addWeatherSave(returnedData);});});};// This is the fetch which provides forecastWeather from the API via location which will be input by the user\nvar getForecastWeatherAsCity=function getForecastWeatherAsCity(location){var url=\"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\";fetch(url).then(function(res){return res.json();}).then(function(data){setForecastWeather(data);});};// This is the fetch which provides forecastWeather from the API via location set as post code\nvar getForecastWeatherAsPostcode=function getForecastWeatherAsPostcode(location){var url=\"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\";fetch(url).then(function(res){return res.json();}).then(function(data){setForecastWeather(data);});};// This is the fetch which provides forecastWeather from the API via location set as post code\n// location is still a string here i think and it isn't receiving the proper formatted array?\nvar getForecastWeatherAsLatLon=function getForecastWeatherAsLatLon(location){var inputArray=location.split(\",\");var url=\"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\";fetch(url).then(function(res){return res.json();}).then(function(data){setForecastWeather(data);});};// Format the user input to the form\n// Pseudocode to format user input for the API\n// Convert string to lower case\n// Convert string to array with comma delimiter - .split(“,”)\n// For each element in the array, get rid of leading and trailing white space - .trim()\n// For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n// Convert the array back to a string\nvar formatInput=function formatInput(userInput){var upperCase=userInput.toUpperCase();var formattedString=upperCase;return formattedString;};var formatInputLatLon=function formatInputLatLon(userInput){var upperCase=userInput.toUpperCase();var inputArray=upperCase.split(\",\");var formattedArray=inputArray.map(function(i){return i.trim();});var formattedString=formattedArray;return formattedString;};// pass state down to the respective components from the API fetch and after input handling\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(LocationAsCityForm,{handleLocationAsCitySubmit:handleLocationAsCitySubmit,location:location,setLocation:setLocation,formatInput:formatInput}),/*#__PURE__*/_jsx(LocationAsPostcodeForm,{handleLocationAsPostcodeSubmit:handleLocationAsPostcodeSubmit,location:location,setLocation:setLocation,formatInput:formatInput}),/*#__PURE__*/_jsx(LocationAsLatLonForm,{handleLocationAsLatLonSubmit:handleLocationAsLatLonSubmit,location:location.toString(),setLocation:setLocation,formatInput:formatInputLatLon}),/*#__PURE__*/_jsx(CurrentWeatherList,{location:location,currentWeather:currentWeather.data}),/*#__PURE__*/_jsx(ForecastWeatherList,{location:location,forecastWeather:forecastWeather.data}),/*#__PURE__*/_jsx(Divider,{children:/*#__PURE__*/_jsx(ForecastWeather,{})}),/*#__PURE__*/_jsx(WeatherGrid,{weatherSaves:weatherSaves,removeWeatherSave:removeWeatherSave})]});}export default CurrentWeatherContainer;","map":{"version":3,"sources":["/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js"],"names":["useState","useEffect","CurrentWeatherList","ForecastWeather","ForecastWeatherList","LocationAsCityForm","LocationAsPostcodeForm","Divider","getWeathers","postWeather","WeatherGrid","LocationAsLatLonForm","CurrentWeatherContainer","currentWeather","setCurrentWeather","forecastWeather","setForecastWeather","location","setLocation","weatherSaves","setWeatherSaves","addWeatherSave","weatherSave","temp","map","s","push","removeWeatherSave","id","indexToDel","_id","indexOf","console","log","splice","then","allWeathers","handleLocationAsCitySubmit","getCurrentWeatherAsCity","getForecastWeatherAsCity","handleLocationAsPostcodeSubmit","getCurrentWeatherAsPostcode","getForecastWeatherAsPostcode","handleLocationAsLatLonSubmit","getCurrentWeatherAsLatLon","getForecastWeatherAsLatLon","url","fetch","res","json","data","returnedData","inputArray","split","formatInput","userInput","upperCase","toUpperCase","formattedString","formatInputLatLon","formattedArray","i","trim","toString"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport CurrentWeatherList from \"../components/CurrentWeatherList\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { Divider} from 'semantic-ui-react';\nimport { getWeathers, postWeather } from \"../WeatherService\";\nimport WeatherGrid from \"../components/WeatherGrid\";\nimport LocationAsLatLonForm from \"../components/LocationAsLatLonForm\";\n\n\nfunction CurrentWeatherContainer(){\n\n    // Sets state for the current weather object which is an array\n    // also sets state for the location input by the user\n    const [currentWeather, setCurrentWeather] = useState([{}]);\n    const [forecastWeather, setForecastWeather] = useState([{}]);\n    const [location, setLocation] = useState(\"\");\n    const [weatherSaves, setWeatherSaves] = useState([]);\n\n    // add a weatherSave object after setting the state of an array to hold\n    // the user search\n    const addWeatherSave = (weatherSave) =>{\n        const temp = weatherSaves.map(s =>s);\n        temp.push(weatherSave);\n        setWeatherSaves(temp);\n      }\n\n    \n    // remove a weatherSave object after setting the state of an array to hold\n    // the user search\n    const removeWeatherSave = (id) => {\n        const temp = weatherSaves.map(s =>s);\n        const indexToDel = temp.map(s => s._id).indexOf(id);\n        console.log(indexToDel);\n    \n        temp.splice(indexToDel, 1);\n        setWeatherSaves(temp);\n    }\n\n    // Trigger a re-render when weather objects from the database need to appear on the front end view\n    useEffect(()=>{\n    getWeathers().then((allWeathers)=>{\n        setWeatherSaves(allWeathers);\n    })\n    }, []);\n\n    \n\n    \n    // handles the location submitted by the \"as city\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsCity\n    const handleLocationAsCitySubmit = (location) => {\n        getCurrentWeatherAsCity(location);\n        getForecastWeatherAsCity(location);\n    } \n\n    // handles the location submitted by the \"as post code\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsPostcodeSubmit= (location) => {\n        getCurrentWeatherAsPostcode(location);\n        getForecastWeatherAsPostcode(location);\n    } \n\n\n    // handles the location submitted by the \"as lat/lon\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsLatLonSubmit= (location) => {\n        getCurrentWeatherAsLatLon(location);\n        getForecastWeatherAsLatLon(location);\n    } \n\n\n\n    // This is the fetch which provides currentWeather by city from the API via location which will be input by the user\n    const getCurrentWeatherAsCity = (location) => {\n    const url = \"https://api.weatherbit.io/v2.0/current?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n    fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            setCurrentWeather(data);\n            // once we have the data from the fetch post this \n            // to the back end\n            postWeather(data).then((returnedData)=>{\n                addWeatherSave(returnedData);\n            })\n          \n        \n        })\n\n    }\n\n      // This is the fetch which provides currentWeather from the API via location which will be input by the user as Lat/Lon\n      const getCurrentWeatherAsLatLon = (location) => {\n        const inputArray = location.split(\",\");\n        const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n       \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setCurrentWeather(data);\n                // once we have the data from the fetch post this \n                // to the back end\n                postWeather(data).then((returnedData)=>{\n                    addWeatherSave(returnedData);\n                })\n              \n            \n            })\n    \n        }\n\n\n     // This is the fetch which provides currentWeather from the API via location set as post code\n     const getCurrentWeatherAsPostcode = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/current?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setCurrentWeather(data);\n                postWeather(data).then((returnedData)=>{\n                    addWeatherSave(returnedData);\n                })\n                \n            })\n    \n        }\n\n     // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n     const getForecastWeatherAsCity = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setForecastWeather(data);\n               \n               \n            \n            })\n    \n        }\n    \n         // This is the fetch which provides forecastWeather from the API via location set as post code\n         const getForecastWeatherAsPostcode = (location) => {\n            const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n        // This is the fetch which provides forecastWeather from the API via location set as post code\n        // location is still a string here i think and it isn't receiving the proper formatted array?\n        const getForecastWeatherAsLatLon = (location) => {\n            const inputArray = location.split(\",\");\n            const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n\n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n    // Format the user input to the form\n    // Pseudocode to format user input for the API\n    // Convert string to lower case\n    // Convert string to array with comma delimiter - .split(“,”)\n    // For each element in the array, get rid of leading and trailing white space - .trim()\n    // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n    // Convert the array back to a string\n    \n    const formatInput = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        const formattedString = upperCase;\n        return formattedString;\n    }\n\n    const formatInputLatLon = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        const inputArray = upperCase.split(\",\");\n        const formattedArray = inputArray.map(i => i.trim());\n        const formattedString = formattedArray;\n        return formattedString;\n        \n    }\n\n    // pass state down to the respective components from the API fetch and after input handling\n    return(\n        <>\n        <LocationAsCityForm \n        handleLocationAsCitySubmit={handleLocationAsCitySubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsPostcodeForm \n        handleLocationAsPostcodeSubmit={handleLocationAsPostcodeSubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsLatLonForm \n          handleLocationAsLatLonSubmit={handleLocationAsLatLonSubmit}\n          location={location.toString()}\n          setLocation={setLocation}\n          formatInput={formatInputLatLon}/>\n        \n        {/* Passes the array associated with the data key to currentWeatherList as props */}\n        <CurrentWeatherList \n        location={location}\n        currentWeather={currentWeather.data}\n        />\n\n        \n        <ForecastWeatherList \n        location={location}\n        forecastWeather={forecastWeather.data}\n        />\n\n        \n        <Divider>\n            <ForecastWeather />\n        </Divider>\n\n        <WeatherGrid weatherSaves={weatherSaves} removeWeatherSave={removeWeatherSave}/>\n\n       \n\n        </>\n    )\n\n\n}\n\n\nexport default CurrentWeatherContainer;"]},"metadata":{},"sourceType":"module"}