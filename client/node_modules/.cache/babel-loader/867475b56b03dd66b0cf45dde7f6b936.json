{"ast":null,"code":"var _jsxFileName = \"/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport CurrentWeatherList from \"../components/CurrentWeatherList\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { Header, Divider } from 'semantic-ui-react';\nimport { getWeathers, postWeather } from \"../WeatherService\";\nimport WeatherGrid from \"../components/WeatherGrid\";\nimport LocationAsLatLonForm from \"../components/LocationAsLatLonForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CurrentWeatherContainer() {\n  _s();\n\n  // Sets state for the current weather object which is an array\n  // also sets state for the location input by the user\n  const [currentWeather, setCurrentWeather] = useState([{}]);\n  const [forecastWeather, setForecastWeather] = useState([{}]);\n  const [location, setLocation] = useState(\"\");\n  const [weatherSaves, setWeatherSaves] = useState([]); // add a weatherSave after setting the state of an array to hold\n  // the searches\n\n  const addWeatherSave = weatherSave => {\n    const temp = weatherSaves.map(s => s);\n    temp.push(weatherSave);\n    setWeatherSaves(temp);\n  };\n\n  const removeWeatherSave = id => {\n    const temp = weatherSaves.map(s => s);\n    const indexToDel = temp.map(s => s._id).indexOf(id);\n    console.log(indexToDel);\n    temp.splice(indexToDel, 1);\n    setWeatherSaves(temp);\n  };\n\n  useEffect(() => {\n    getWeathers().then(allWeathers => {\n      setWeatherSaves(allWeathers);\n    });\n  }, []); // handles the location submitted by the \"as city\" form\n  // invokes the fetch passing the location to getCurrentWeatherAsCity\n\n  const handleLocationAsCitySubmit = location => {\n    getCurrentWeatherAsCity(location);\n    getForecastWeatherAsCity(location);\n  }; // handles the location submitted by the \"as post code\" form\n  // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n\n\n  const handleLocationAsPostcodeSubmit = location => {\n    getCurrentWeatherAsPostcode(location);\n    getForecastWeatherAsPostcode(location);\n  }; // handles the location submitted by the \"as lat/lon\" form\n  // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n\n\n  const handleLocationAsLatLonSubmit = location => {\n    getCurrentWeatherAsLatLon(location);\n    getForecastWeatherAsLatLon(location);\n  }; // This is the fetch which provides currentWeather from the API via location which will be input by the user\n\n\n  const getCurrentWeatherAsCity = location => {\n    const url = \"https://api.weatherbit.io/v2.0/current?city=\" + location + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setCurrentWeather(data); // once we have the data from the fetch post this \n      // to the back end\n\n      postWeather(data).then(() => {\n        console.log(data);\n        addWeatherSave(data);\n      });\n    });\n  }; // This is the fetch which provides currentWeather from the API via location which will be input by the user as Lat/Lon\n\n\n  const getCurrentWeatherAsLatLon = location => {\n    const inputArray = location.split(\",\");\n    const url = \"https://api.weatherbit.io/v2.0/current?lat=\" + inputArray[0] + \"&lon=\" + inputArray[1] + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(location);\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setCurrentWeather(data); // once we have the data from the fetch post this \n      // to the back end\n\n      postWeather(data).then(() => {\n        addWeatherSave(data);\n      });\n    });\n  }; // This is the fetch which provides currentWeather from the API via location set as post code\n\n\n  const getCurrentWeatherAsPostcode = location => {\n    const url = \"https://api.weatherbit.io/v2.0/current?postal_code=\" + location + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setCurrentWeather(data);\n      postWeather(data).then(() => {\n        addWeatherSave(data);\n      });\n    });\n  }; // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n\n\n  const getForecastWeatherAsCity = location => {\n    const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\" + location + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      console.log(data);\n      setForecastWeather(data);\n    });\n  }; // This is the fetch which provides forecastWeather from the API via location set as post code\n\n\n  const getForecastWeatherAsPostcode = location => {\n    const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\" + location + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setForecastWeather(data);\n    });\n  }; // This is the fetch which provides forecastWeather from the API via location set as post code\n  // location is still a string here i think and it isn't receiving the proper formatted array?\n\n\n  const getForecastWeatherAsLatLon = location => {\n    const inputArray = location.split(\",\");\n    const url = \"https://api.weatherbit.io/v2.0/current?lat=\" + inputArray[0] + \"&lon=\" + inputArray[1] + \"&key=42f951c1eea94e33a68cd790a1f613fb\";\n    console.log(location);\n    console.log(\"Url: \" + url);\n    fetch(url).then(res => res.json()).then(data => {\n      // console.log(data);\n      setForecastWeather(data);\n    });\n  }; // Format the user input to the form\n  // Pseudocode to format user input for the API\n  // Convert string to lower case\n  // Convert string to array with comma delimiter - .split(“,”)\n  // For each element in the array, get rid of leading and trailing white space - .trim()\n  // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n  // Convert the array back to a string\n\n\n  const formatInput = userInput => {\n    const upperCase = userInput.toUpperCase(); // const inputArray = upperCase.split(\",\");\n    // const formattedArray = inputArray.map(i => i.trim());\n    // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n\n    const formattedString = upperCase; // // const formattedString = arrayWithUnderscores.toString();\n    // console.log(formattedString);\n\n    return formattedString; // return userInput\n  };\n\n  const formatInputLatLon = userInput => {\n    const upperCase = userInput.toUpperCase();\n    const inputArray = upperCase.split(\",\"); // console.log(inputArray);\n\n    const formattedArray = inputArray.map(i => i.trim());\n    console.log(formattedArray); // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n\n    const formattedString = formattedArray; // // const formattedString = arrayWithUnderscores.toString();\n\n    return formattedString; // return userInput\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LocationAsCityForm, {\n      handleLocationAsCitySubmit: handleLocationAsCitySubmit,\n      location: location,\n      setLocation: setLocation,\n      formatInput: formatInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LocationAsPostcodeForm, {\n      handleLocationAsPostcodeSubmit: handleLocationAsPostcodeSubmit,\n      location: location,\n      setLocation: setLocation,\n      formatInput: formatInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LocationAsLatLonForm, {\n      handleLocationAsLatLonSubmit: handleLocationAsLatLonSubmit,\n      location: location.toString(),\n      setLocation: setLocation,\n      formatInput: formatInputLatLon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CurrentWeatherList, {\n      location: location,\n      currentWeather: currentWeather.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ForecastWeatherList, {\n      location: location,\n      forecastWeather: forecastWeather.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      children: /*#__PURE__*/_jsxDEV(ForecastWeather, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WeatherGrid, {\n      weatherSaves: weatherSaves,\n      removeWeatherSave: removeWeatherSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CurrentWeatherContainer, \"cqGbISSM2RQ6lcHNCUPq1bk5bY8=\");\n\n_c = CurrentWeatherContainer;\nexport default CurrentWeatherContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentWeatherContainer\");","map":{"version":3,"sources":["/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js"],"names":["useState","useEffect","CurrentWeather","CurrentWeatherList","ForecastWeather","ForecastWeatherList","LocationAsCityForm","LocationAsPostcodeForm","Header","Divider","getWeathers","postWeather","WeatherGrid","LocationAsLatLonForm","CurrentWeatherContainer","currentWeather","setCurrentWeather","forecastWeather","setForecastWeather","location","setLocation","weatherSaves","setWeatherSaves","addWeatherSave","weatherSave","temp","map","s","push","removeWeatherSave","id","indexToDel","_id","indexOf","console","log","splice","then","allWeathers","handleLocationAsCitySubmit","getCurrentWeatherAsCity","getForecastWeatherAsCity","handleLocationAsPostcodeSubmit","getCurrentWeatherAsPostcode","getForecastWeatherAsPostcode","handleLocationAsLatLonSubmit","getCurrentWeatherAsLatLon","getForecastWeatherAsLatLon","url","fetch","res","json","data","inputArray","split","formatInput","userInput","upperCase","toUpperCase","formattedString","formatInputLatLon","formattedArray","i","trim","toString"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport CurrentWeatherList from \"../components/CurrentWeatherList\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { Header, Divider} from 'semantic-ui-react';\nimport { getWeathers, postWeather } from \"../WeatherService\";\nimport WeatherGrid from \"../components/WeatherGrid\";\nimport LocationAsLatLonForm from \"../components/LocationAsLatLonForm\";\n\nfunction CurrentWeatherContainer(){\n\n    // Sets state for the current weather object which is an array\n    // also sets state for the location input by the user\n    const [currentWeather, setCurrentWeather] = useState([{}]);\n    const [forecastWeather, setForecastWeather] = useState([{}]);\n    const [location, setLocation] = useState(\"\");\n    const [weatherSaves, setWeatherSaves] = useState([]);\n\n    // add a weatherSave after setting the state of an array to hold\n    // the searches\n    const addWeatherSave = (weatherSave) =>{\n        const temp = weatherSaves.map(s =>s);\n        temp.push(weatherSave);\n        setWeatherSaves(temp);\n      }\n\n    const removeWeatherSave = (id) => {\n        const temp = weatherSaves.map(s =>s);\n        const indexToDel = temp.map(s => s._id).indexOf(id);\n        console.log(indexToDel);\n    \n        temp.splice(indexToDel, 1);\n        setWeatherSaves(temp);\n    }\n\n    useEffect(()=>{\n    getWeathers().then((allWeathers)=>{\n        setWeatherSaves(allWeathers);\n    })\n    }, []);\n\n    \n\n    \n    // handles the location submitted by the \"as city\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsCity\n    const handleLocationAsCitySubmit = (location) => {\n        getCurrentWeatherAsCity(location);\n        getForecastWeatherAsCity(location);\n    } \n\n    // handles the location submitted by the \"as post code\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsPostcodeSubmit= (location) => {\n        getCurrentWeatherAsPostcode(location);\n        getForecastWeatherAsPostcode(location);\n    } \n\n\n    // handles the location submitted by the \"as lat/lon\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsLatLonSubmit= (location) => {\n        getCurrentWeatherAsLatLon(location);\n        getForecastWeatherAsLatLon(location);\n    } \n\n\n\n\n\n    // This is the fetch which provides currentWeather from the API via location which will be input by the user\n    const getCurrentWeatherAsCity = (location) => {\n    const url = \"https://api.weatherbit.io/v2.0/current?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n\n    console.log(\"Url: \" + url);\n    \n    fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            // console.log(data);\n            setCurrentWeather(data);\n            // once we have the data from the fetch post this \n            // to the back end\n            postWeather(data).then(()=>{\n                console.log(data);\n                addWeatherSave(data);\n            })\n          \n        \n        })\n\n    }\n\n      // This is the fetch which provides currentWeather from the API via location which will be input by the user as Lat/Lon\n      const getCurrentWeatherAsLatLon = (location) => {\n        const inputArray = location.split(\",\");\n        const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        console.log(location);\n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                setCurrentWeather(data);\n                // once we have the data from the fetch post this \n                // to the back end\n                postWeather(data).then(()=>{\n                    addWeatherSave(data);\n                })\n              \n            \n            })\n    \n        }\n\n\n\n\n\n     // This is the fetch which provides currentWeather from the API via location set as post code\n     const getCurrentWeatherAsPostcode = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/current?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                setCurrentWeather(data);\n                postWeather(data).then(()=>{\n                    addWeatherSave(data);\n                })\n                \n            })\n    \n        }\n\n     // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n     const getForecastWeatherAsCity = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setForecastWeather(data);\n               \n               \n            \n            })\n    \n        }\n    \n         // This is the fetch which provides forecastWeather from the API via location set as post code\n         const getForecastWeatherAsPostcode = (location) => {\n            const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        \n            console.log(\"Url: \" + url);\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    // console.log(data);\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n        // This is the fetch which provides forecastWeather from the API via location set as post code\n        // location is still a string here i think and it isn't receiving the proper formatted array?\n        const getForecastWeatherAsLatLon = (location) => {\n            const inputArray = location.split(\",\");\n            const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n            console.log(location);\n            console.log(\"Url: \" + url);\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    // console.log(data);\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n    // Format the user input to the form\n    // Pseudocode to format user input for the API\n    // Convert string to lower case\n    // Convert string to array with comma delimiter - .split(“,”)\n    // For each element in the array, get rid of leading and trailing white space - .trim()\n    // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n    // Convert the array back to a string\n    \n    const formatInput = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        // const inputArray = upperCase.split(\",\");\n        // const formattedArray = inputArray.map(i => i.trim());\n        // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n        const formattedString = upperCase;\n        // // const formattedString = arrayWithUnderscores.toString();\n        // console.log(formattedString);\n        return formattedString;\n        // return userInput\n    }\n\n    const formatInputLatLon = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        const inputArray = upperCase.split(\",\");\n        // console.log(inputArray);\n        const formattedArray = inputArray.map(i => i.trim());\n        console.log(formattedArray);\n        // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n        const formattedString = formattedArray;\n        // // const formattedString = arrayWithUnderscores.toString();\n        return formattedString;\n        // return userInput\n    }\n\n\n\n\n    return(\n        <>\n        <LocationAsCityForm \n        handleLocationAsCitySubmit={handleLocationAsCitySubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsPostcodeForm \n        handleLocationAsPostcodeSubmit={handleLocationAsPostcodeSubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsLatLonForm \n          handleLocationAsLatLonSubmit={handleLocationAsLatLonSubmit}\n          location={location.toString()}\n          setLocation={setLocation}\n          formatInput={formatInputLatLon}/>\n        \n        {/* Passes the array associated with the data key to currentWeatherList as props */}\n        <CurrentWeatherList \n        location={location}\n        currentWeather={currentWeather.data}\n        />\n\n        \n        <ForecastWeatherList \n        location={location}\n        forecastWeather={forecastWeather.data}\n        />\n\n        \n        <Divider>\n            <ForecastWeather />\n        </Divider>\n\n        <WeatherGrid weatherSaves={weatherSaves} removeWeatherSave={removeWeatherSave}/>\n\n       \n\n        </>\n    )\n\n\n}\n\n\nexport default CurrentWeatherContainer;"]},"metadata":{},"sourceType":"module"}