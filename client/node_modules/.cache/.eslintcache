[{"/Users/pedram/Coding/bezero_weather_app/client/src/index.js":"1","/Users/pedram/Coding/bezero_weather_app/client/src/App.js":"2","/Users/pedram/Coding/bezero_weather_app/client/src/reportWebVitals.js":"3","/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js":"4","/Users/pedram/Coding/bezero_weather_app/client/src/components/AppHeader.js":"5","/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeatherList.js":"6","/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeather.js":"7","/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsPostcodeForm.js":"8","/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsCityForm.js":"9","/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeather.js":"10","/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeatherList.js":"11","/Users/pedram/Coding/bezero_weather_app/client/src/WeatherService.js":"12","/Users/pedram/Coding/bezero_weather_app/client/src/components/WeatherGrid.js":"13","/Users/pedram/Coding/bezero_weather_app/client/src/components/WeatherCard.js":"14","/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsLatLonForm.js":"15"},{"size":542,"mtime":1620153228636,"results":"16","hashOfConfig":"17"},{"size":515,"mtime":1620237576065,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1620153123434,"results":"19","hashOfConfig":"17"},{"size":9530,"mtime":1620325268337,"results":"20","hashOfConfig":"17"},{"size":328,"mtime":1620325089542,"results":"21","hashOfConfig":"17"},{"size":1107,"mtime":1620327406411,"results":"22","hashOfConfig":"17"},{"size":1120,"mtime":1620327443412,"results":"23","hashOfConfig":"17"},{"size":903,"mtime":1620246257803,"results":"24","hashOfConfig":"17"},{"size":976,"mtime":1620325407483,"results":"25","hashOfConfig":"17"},{"size":712,"mtime":1620327108366,"results":"26","hashOfConfig":"17"},{"size":1008,"mtime":1620248039185,"results":"27","hashOfConfig":"17"},{"size":534,"mtime":1620245586166,"results":"28","hashOfConfig":"17"},{"size":532,"mtime":1620327377454,"results":"29","hashOfConfig":"17"},{"size":793,"mtime":1620326832937,"results":"30","hashOfConfig":"17"},{"size":936,"mtime":1620325815444,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1vk1ylo",{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/pedram/Coding/bezero_weather_app/client/src/index.js",[],["67","68"],"/Users/pedram/Coding/bezero_weather_app/client/src/App.js",["69","70","71","72"],"import './App.css';\nimport {Container, Grid, Header, Image, List, Embed} from 'semantic-ui-react';\nimport AppHeader from './components/AppHeader';\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer\";\n\n\nfunction App() {\n  return (\n  <>\n     <Container>\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n                <AppHeader />\n                <CurrentWeatherContainer />\n            </Grid.Column>\n            </Grid>\n        </Container>\n  </>\n  );\n}\n\nexport default App;\n","/Users/pedram/Coding/bezero_weather_app/client/src/reportWebVitals.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js",["73","74"],"import { useState, useEffect } from \"react\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport CurrentWeatherList from \"../components/CurrentWeatherList\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { Header, Divider} from 'semantic-ui-react';\nimport { getWeathers, postWeather } from \"../WeatherService\";\nimport WeatherGrid from \"../components/WeatherGrid\";\nimport LocationAsLatLonForm from \"../components/LocationAsLatLonForm\";\n\nfunction CurrentWeatherContainer(){\n\n    // Sets state for the current weather object which is an array\n    // also sets state for the location input by the user\n    const [currentWeather, setCurrentWeather] = useState([{}]);\n    const [forecastWeather, setForecastWeather] = useState([{}]);\n    const [location, setLocation] = useState(\"\");\n    const [weatherSaves, setWeatherSaves] = useState([]);\n\n    // add a weatherSave after setting the state of an array to hold\n    // the searches\n    const addWeatherSave = (weatherSave) =>{\n        const temp = weatherSaves.map(s =>s);\n        temp.push(weatherSave);\n        setWeatherSaves(temp);\n      }\n\n    const removeWeatherSave = (id) => {\n        const temp = weatherSaves.map(s =>s);\n        const indexToDel = temp.map(s => s._id).indexOf(id);\n        console.log(indexToDel);\n    \n        temp.splice(indexToDel, 1);\n        setWeatherSaves(temp);\n    }\n\n    useEffect(()=>{\n    getWeathers().then((allWeathers)=>{\n        setWeatherSaves(allWeathers);\n    })\n    }, []);\n\n    \n\n    \n    // handles the location submitted by the \"as city\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsCity\n    const handleLocationAsCitySubmit = (location) => {\n        getCurrentWeatherAsCity(location);\n        getForecastWeatherAsCity(location);\n    } \n\n    // handles the location submitted by the \"as post code\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsPostcodeSubmit= (location) => {\n        getCurrentWeatherAsPostcode(location);\n        getForecastWeatherAsPostcode(location);\n    } \n\n\n    // handles the location submitted by the \"as lat/lon\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsLatLonSubmit= (location) => {\n        getCurrentWeatherAsLatLon(location);\n        getForecastWeatherAsLatLon(location);\n    } \n\n\n\n\n\n    // This is the fetch which provides currentWeather from the API via location which will be input by the user\n    const getCurrentWeatherAsCity = (location) => {\n    const url = \"https://api.weatherbit.io/v2.0/current?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n\n    console.log(\"Url: \" + url);\n    \n    fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            // console.log(data);\n            setCurrentWeather(data);\n            // once we have the data from the fetch post this \n            // to the back end\n            postWeather(data).then(()=>{\n                addWeatherSave(data);\n            })\n          \n        \n        })\n\n    }\n\n      // This is the fetch which provides currentWeather from the API via location which will be input by the user as Lat/Lon\n      const getCurrentWeatherAsLatLon = (location) => {\n        const inputArray = location.split(\",\");\n        const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        console.log(location);\n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                setCurrentWeather(data);\n                // once we have the data from the fetch post this \n                // to the back end\n                postWeather(data).then(()=>{\n                    addWeatherSave(data);\n                })\n              \n            \n            })\n    \n        }\n\n\n\n\n\n     // This is the fetch which provides currentWeather from the API via location set as post code\n     const getCurrentWeatherAsPostcode = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/current?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                setCurrentWeather(data);\n                postWeather(data).then(()=>{\n                    addWeatherSave(data);\n                })\n                \n            })\n    \n        }\n\n     // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n     const getForecastWeatherAsCity = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setForecastWeather(data);\n               \n               \n            \n            })\n    \n        }\n    \n         // This is the fetch which provides forecastWeather from the API via location set as post code\n         const getForecastWeatherAsPostcode = (location) => {\n            const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        \n            console.log(\"Url: \" + url);\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    // console.log(data);\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n        // This is the fetch which provides forecastWeather from the API via location set as post code\n        // location is still a string here i think and it isn't receiving the proper formatted array?\n        const getForecastWeatherAsLatLon = (location) => {\n            const inputArray = location.split(\",\");\n            const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n            console.log(location);\n            console.log(\"Url: \" + url);\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    // console.log(data);\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n    // Format the user input to the form\n    // Pseudocode to format user input for the API\n    // Convert string to lower case\n    // Convert string to array with comma delimiter - .split(“,”)\n    // For each element in the array, get rid of leading and trailing white space - .trim()\n    // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n    // Convert the array back to a string\n    \n    const formatInput = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        // const inputArray = upperCase.split(\",\");\n        // const formattedArray = inputArray.map(i => i.trim());\n        // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n        const formattedString = upperCase;\n        // // const formattedString = arrayWithUnderscores.toString();\n        // console.log(formattedString);\n        return formattedString;\n        // return userInput\n    }\n\n    const formatInputLatLon = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        const inputArray = upperCase.split(\",\");\n        // console.log(inputArray);\n        const formattedArray = inputArray.map(i => i.trim());\n        console.log(formattedArray);\n        // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n        const formattedString = formattedArray;\n        // // const formattedString = arrayWithUnderscores.toString();\n        return formattedString;\n        // return userInput\n    }\n\n\n\n\n    return(\n        <>\n        <LocationAsCityForm \n        handleLocationAsCitySubmit={handleLocationAsCitySubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsPostcodeForm \n        handleLocationAsPostcodeSubmit={handleLocationAsPostcodeSubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsLatLonForm \n          handleLocationAsLatLonSubmit={handleLocationAsLatLonSubmit}\n          location={location.toString()}\n          setLocation={setLocation}\n          formatInput={formatInputLatLon}/>\n        \n        {/* Passes the array associated with the data key to currentWeatherList as props */}\n        <CurrentWeatherList \n        location={location}\n        currentWeather={currentWeather.data}\n        />\n\n        \n        <ForecastWeatherList \n        location={location}\n        forecastWeather={forecastWeather.data}\n        />\n\n        \n        <Divider>\n            <ForecastWeather />\n        </Divider>\n\n        <WeatherGrid weatherSaves={weatherSaves} removeWeatherSave={removeWeatherSave}/>\n\n       \n\n        </>\n    )\n\n\n}\n\n\nexport default CurrentWeatherContainer;","/Users/pedram/Coding/bezero_weather_app/client/src/components/AppHeader.js",["75"],"import { Header } from \"semantic-ui-react\";\nimport weatherbitLogo from '../assets/weatherbitLogo.png';\n\nfunction AppHeader(){\n\n    return(\n        <>\n         <Header className=\"appHeader\" textAlign=\"center\"  as='h1'>\n        </Header>\n        <img src={weatherbitLogo}></img> \n        </>\n    )\n\n\n}\n\n\n\nexport default AppHeader;","/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeatherList.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeather.js",["76","77","78"],"/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsPostcodeForm.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsCityForm.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeather.js",["79","80","81"],"/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeatherList.js",["82"],"import CurrentWeather from './CurrentWeather';\nimport { postWeather } from \"../WeatherService\";\n\n// currentWeather in this location is the array stored in the data key from the Weatherbit API\n\nfunction CurrentWeatherList({currentWeather}){\n    // return nothing if there is no current weather object, otherwise...\n    if (!currentWeather) return null;\n\n \n    // console.log(currentWeather);\n\n    // Map currentWeather array to access the JSON keys\n    const displayCurrentWeather = currentWeather.map(weather => {\n        return <CurrentWeather\n                weatherCondition={weather.weather.description}\n                cityName={weather.city_name}\n                sunsetTime={weather.sunset}\n                sunriseTime={weather.sunrise}\n                currentTemperature={weather.temp}\n                observedTime={weather.ob_time}\n\n                />\n           \n    })\n\n\n    return(\n    \n        <>\n\n        {displayCurrentWeather}\n        \n        </>\n    )\n}\n\n\n\nexport default CurrentWeatherList;","/Users/pedram/Coding/bezero_weather_app/client/src/WeatherService.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/WeatherGrid.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/WeatherCard.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsLatLonForm.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":2,"column":26,"nodeType":"89","messageId":"90","endLine":2,"endColumn":32},{"ruleId":"87","severity":1,"message":"91","line":2,"column":34,"nodeType":"89","messageId":"90","endLine":2,"endColumn":39},{"ruleId":"87","severity":1,"message":"92","line":2,"column":41,"nodeType":"89","messageId":"90","endLine":2,"endColumn":45},{"ruleId":"87","severity":1,"message":"93","line":2,"column":47,"nodeType":"89","messageId":"90","endLine":2,"endColumn":52},{"ruleId":"87","severity":1,"message":"94","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":8,"column":10,"nodeType":"89","messageId":"90","endLine":8,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":10,"column":9,"nodeType":"97","endLine":10,"endColumn":35},{"ruleId":"87","severity":1,"message":"91","line":1,"column":37,"nodeType":"89","messageId":"90","endLine":1,"endColumn":42},{"ruleId":"87","severity":1,"message":"92","line":1,"column":44,"nodeType":"89","messageId":"90","endLine":1,"endColumn":48},{"ruleId":"87","severity":1,"message":"93","line":1,"column":50,"nodeType":"89","messageId":"90","endLine":1,"endColumn":55},{"ruleId":"87","severity":1,"message":"91","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":33},{"ruleId":"87","severity":1,"message":"92","line":1,"column":35,"nodeType":"89","messageId":"90","endLine":1,"endColumn":39},{"ruleId":"87","severity":1,"message":"93","line":1,"column":41,"nodeType":"89","messageId":"90","endLine":1,"endColumn":46},{"ruleId":"87","severity":1,"message":"98","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":21},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","'List' is defined but never used.","'Embed' is defined but never used.","'CurrentWeather' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'postWeather' is defined but never used.","no-global-assign","no-unsafe-negation"]