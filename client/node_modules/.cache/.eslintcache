[{"/Users/pedram/Coding/bezero_weather_app/client/src/index.js":"1","/Users/pedram/Coding/bezero_weather_app/client/src/App.js":"2","/Users/pedram/Coding/bezero_weather_app/client/src/reportWebVitals.js":"3","/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js":"4","/Users/pedram/Coding/bezero_weather_app/client/src/components/AppHeader.js":"5","/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeatherList.js":"6","/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeather.js":"7","/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsPostcodeForm.js":"8","/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsCityForm.js":"9","/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeather.js":"10","/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeatherList.js":"11","/Users/pedram/Coding/bezero_weather_app/client/src/WeatherService.js":"12"},{"size":542,"mtime":1620153228636,"results":"13","hashOfConfig":"14"},{"size":515,"mtime":1620237576065,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1620153123434,"results":"16","hashOfConfig":"14"},{"size":5914,"mtime":1620248199821,"results":"17","hashOfConfig":"14"},{"size":335,"mtime":1620230295219,"results":"18","hashOfConfig":"14"},{"size":966,"mtime":1620238868566,"results":"19","hashOfConfig":"14"},{"size":1042,"mtime":1620237490327,"results":"20","hashOfConfig":"14"},{"size":903,"mtime":1620246257803,"results":"21","hashOfConfig":"14"},{"size":964,"mtime":1620247399113,"results":"22","hashOfConfig":"14"},{"size":690,"mtime":1620237650340,"results":"23","hashOfConfig":"14"},{"size":1008,"mtime":1620248039185,"results":"24","hashOfConfig":"14"},{"size":534,"mtime":1620245586166,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1vk1ylo",{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/pedram/Coding/bezero_weather_app/client/src/index.js",[],["56","57"],"/Users/pedram/Coding/bezero_weather_app/client/src/App.js",["58","59","60","61"],"import './App.css';\nimport {Container, Grid, Header, Image, List, Embed} from 'semantic-ui-react';\nimport AppHeader from './components/AppHeader';\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer\";\n\n\nfunction App() {\n  return (\n  <>\n     <Container>\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n                <AppHeader />\n                <CurrentWeatherContainer />\n            </Grid.Column>\n            </Grid>\n        </Container>\n  </>\n  );\n}\n\nexport default App;\n","/Users/pedram/Coding/bezero_weather_app/client/src/reportWebVitals.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/containers/CurrentWeatherContainer.js",["62","63"],"import { useState, useEffect } from \"react\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport CurrentWeatherList from \"../components/CurrentWeatherList\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { Divider} from 'semantic-ui-react';\nimport { postWeather } from \"../WeatherService\";\n\nfunction CurrentWeatherContainer(){\n\n    // Sets state for the current weather object which is an array\n    // also sets state for the location input by the user\n    const [currentWeather, setCurrentWeather] = useState([{}]);\n    const [forecastWeather, setForecastWeather] = useState([{}]);\n    const [location, setLocation] = useState(\"\");\n    const [weatherSaves, setWeatherSaves] = useState([]);\n\n    // add a weatherSave after setting the state of an array to hold\n    // the searches\n    const addWeatherSave = (weatherSave) =>{\n        const temp = weatherSaves.map(s =>s);\n        temp.push(weatherSave);\n        setWeatherSaves(temp);\n      }\n\n    \n    // handles the location submitted by the \"as city\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsCity\n    const handleLocationAsCitySubmit = (location) => {\n        getCurrentWeatherAsCity(location);\n        getForecastWeatherAsCity(location);\n    } \n\n    // handles the location submitted by the \"as post code\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsPostcodeSubmit= (location) => {\n        getCurrentWeatherAsPostcode(location);\n        getForecastWeatherAsPostcode(location);\n    } \n\n    // This is the fetch which provides currentWeather from the API via location which will be input by the user\n    const getCurrentWeatherAsCity = (location) => {\n    const url = \"https://api.weatherbit.io/v2.0/current?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n\n    console.log(\"Url: \" + url);\n    \n    fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            // console.log(data);\n            setCurrentWeather(data);\n            postWeather(data).then(()=>{\n                addWeatherSave(data);\n            })\n        \n        })\n\n       \n\n    }\n\n     // This is the fetch which provides currentWeather from the API via location set as post code\n     const getCurrentWeatherAsPostcode = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/current?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data);\n                setCurrentWeather(data);\n            })\n    \n        }\n\n     // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n     const getForecastWeatherAsCity = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        console.log(\"Url: \" + url);\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setForecastWeather(data);\n            })\n    \n        }\n    \n         // This is the fetch which provides forecastWeather from the API via location set as post code\n         const getForecastWeatherAsPostcode = (location) => {\n            const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        \n            console.log(\"Url: \" + url);\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    // console.log(data);\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n    // Format the user input to the form\n    // Pseudocode to format user input for the API\n    // Convert string to lower case\n    // Convert string to array with comma delimiter - .split(“,”)\n    // For each element in the array, get rid of leading and trailing white space - .trim()\n    // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n    // Convert the array back to a string\n    \n    const formatInput = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        // const inputArray = lowerCase.split(\",\");\n        // const formattedArray = inputArray.map(i => i.trim());\n        // const arrayWithUnderscores = formattedArray.map(i => i.replace(\" \", \"_\"));\n        const formattedString = upperCase;\n        // // const formattedString = arrayWithUnderscores.toString();\n        // console.log(formattedString);\n        return formattedString;\n        // return userInput\n    }\n\n\n    return(\n        <>\n     \n        <LocationAsCityForm \n        handleLocationAsCitySubmit={handleLocationAsCitySubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsPostcodeForm \n        handleLocationAsPostcodeSubmit={handleLocationAsPostcodeSubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n        \n        {/* Passes the array associated with the data key to currentWeatherList as props */}\n        <CurrentWeatherList \n        location={location}\n        currentWeather={currentWeather.data}\n        />\n\n        \n        <ForecastWeatherList \n        location={location}\n        forecastWeather={forecastWeather.data}\n        />\n\n        \n        <Divider>\n            <ForecastWeather />\n        </Divider>\n       \n\n        </>\n    )\n\n\n}\n\n\nexport default CurrentWeatherContainer;","/Users/pedram/Coding/bezero_weather_app/client/src/components/AppHeader.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeatherList.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeather.js",["64","65","66"],"import {Container, Divider, Header, Image, List, Embed, Grid} from 'semantic-ui-react';\n\n\n\nfunction CurrentWeather({ weatherCondition, cityName, sunsetTime, currentTemperature, sunriseTime, observedTime}){\n   if (!CurrentWeather) return null\n//    console.log(datetime + \"HIIIIIII\")\n\n    return(\n        <>\n      \n        <Container>\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n                <Container><Header as=\"h3\">Location: {cityName} </Header></Container> \n                <Container>Current Weather Condition: {weatherCondition} </Container>\n                <Container>Current Temperature: {currentTemperature} °C </Container> \n                <Container>Sunrise Time:{sunriseTime} </Container> \n                <Container>Sunset Time: {sunsetTime} </Container> \n                <Container>Weather Last Observed At: {observedTime} </Container> \n                <Divider></Divider>\n            </Grid.Column>\n            </Grid>\n        </Container>\n       \n        </>\n    )\n\n\n}\n\n\n\nexport default CurrentWeather;","/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsPostcodeForm.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/LocationAsCityForm.js",[],"/Users/pedram/Coding/bezero_weather_app/client/src/components/ForecastWeather.js",["67","68","69"],"import {Container, Header, Image, List, Embed, Grid} from 'semantic-ui-react';\n\n\n\nfunction ForecastWeather({datetime, weatherCondition,currentTemperature}){\n   if (!datetime) return null\n\n    return(\n        <>\n        <Container>\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n                <Container><Header>Forecast Date: {datetime} </Header></Container>\n                <Container>Forecast Weather Condition: {weatherCondition} </Container>\n                <Container>Forecast Temperature: {currentTemperature} °C </Container> \n            \n            </Grid.Column>\n            </Grid>\n        </Container>\n        </>\n    )\n\n\n}\n\n\n\nexport default ForecastWeather;","/Users/pedram/Coding/bezero_weather_app/client/src/components/CurrentWeatherList.js",["70"],"import CurrentWeather from './CurrentWeather';\nimport { postWeather } from \"../WeatherService\";\n\n// currentWeather in this location is the array stored in the data key from the Weatherbit API\n\nfunction CurrentWeatherList({currentWeather}){\n    // return nothing if there is no current weather object, otherwise...\n    if (!currentWeather) return null;\n\n \n    // console.log(currentWeather);\n\n    // Map currentWeather array to access the JSON keys\n    const displayCurrentWeather = currentWeather.map(weather => {\n        return <CurrentWeather\n                weatherCondition={weather.weather.description}\n                cityName={weather.city_name}\n                sunsetTime={weather.sunset}\n                sunriseTime={weather.sunrise}\n                currentTemperature={weather.temp}\n                observedTime={weather.ob_time}\n\n                />\n           \n    })\n\n\n    return(\n    \n        <>\n\n        {displayCurrentWeather}\n        \n        </>\n    )\n}\n\n\n\nexport default CurrentWeatherList;","/Users/pedram/Coding/bezero_weather_app/client/src/WeatherService.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":26,"nodeType":"77","messageId":"78","endLine":2,"endColumn":32},{"ruleId":"75","severity":1,"message":"79","line":2,"column":34,"nodeType":"77","messageId":"78","endLine":2,"endColumn":39},{"ruleId":"75","severity":1,"message":"80","line":2,"column":41,"nodeType":"77","messageId":"78","endLine":2,"endColumn":45},{"ruleId":"75","severity":1,"message":"81","line":2,"column":47,"nodeType":"77","messageId":"78","endLine":2,"endColumn":52},{"ruleId":"75","severity":1,"message":"82","line":1,"column":20,"nodeType":"77","messageId":"78","endLine":1,"endColumn":29},{"ruleId":"75","severity":1,"message":"83","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":22},{"ruleId":"75","severity":1,"message":"79","line":1,"column":37,"nodeType":"77","messageId":"78","endLine":1,"endColumn":42},{"ruleId":"75","severity":1,"message":"80","line":1,"column":44,"nodeType":"77","messageId":"78","endLine":1,"endColumn":48},{"ruleId":"75","severity":1,"message":"81","line":1,"column":50,"nodeType":"77","messageId":"78","endLine":1,"endColumn":55},{"ruleId":"75","severity":1,"message":"79","line":1,"column":28,"nodeType":"77","messageId":"78","endLine":1,"endColumn":33},{"ruleId":"75","severity":1,"message":"80","line":1,"column":35,"nodeType":"77","messageId":"78","endLine":1,"endColumn":39},{"ruleId":"75","severity":1,"message":"81","line":1,"column":41,"nodeType":"77","messageId":"78","endLine":1,"endColumn":46},{"ruleId":"75","severity":1,"message":"84","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":21},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","'List' is defined but never used.","'Embed' is defined but never used.","'useEffect' is defined but never used.","'CurrentWeather' is defined but never used.","'postWeather' is defined but never used.","no-global-assign","no-unsafe-negation"]