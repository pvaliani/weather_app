{"version":3,"sources":["assets/weatherbitLogo.png","components/AppHeader.js","components/CurrentWeather.js","components/CurrentWeatherList.js","components/ForecastWeather.js","components/ForecastWeatherList.js","components/LocationAsCityForm.js","components/LocationAsPostcodeForm.js","WeatherService.js","components/WeatherCard.js","components/WeatherGrid.js","components/LocationAsLatLonForm.js","containers/CurrentWeatherContainer.js","App.js","reportWebVitals.js","index.js"],"names":["AppHeader","Header","className","textAlign","as","src","weatherbitLogo","Divider","CurrentWeather","weatherCondition","cityName","sunsetTime","currentTemperature","sunriseTime","observedTime","Container","Grid","Column","CurrentWeatherList","currentWeather","displayCurrentWeather","map","weather","description","city_name","sunset","sunrise","temp","ob_time","ForecastWeather","datetime","ForecastWeatherList","forecastWeather","displayForecastWeather","slice","LocationAsCityForm","handleLocationAsCitySubmit","location","setLocation","formatInput","Form","onSubmit","event","preventDefault","Field","Input","icon","placeholder","onChange","formattedInput","target","value","LocationAsPostcodeForm","handleLocationAsPostcodeSubmit","baseURL","postWeather","payload","fetch","method","body","JSON","stringify","headers","then","res","json","WeatherCard","weatherSave","removeWeatherSave","data","Button","onClick","id","_id","console","log","WeatherGrid","weatherSaves","weatherSavesList","LocationAsLatLonForm","handleLocationAsLatLonSubmit","CurrentWeatherContainer","useState","setCurrentWeather","setForecastWeather","setWeatherSaves","addWeatherSave","s","push","useEffect","allWeathers","getCurrentWeatherAsCity","returnedData","getCurrentWeatherAsLatLon","inputArray","split","url","getCurrentWeatherAsPostcode","getForecastWeatherAsCity","getForecastWeatherAsPostcode","getForecastWeatherAsLatLon","userInput","toUpperCase","toString","i","trim","indexToDel","indexOf","splice","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79d46b52.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weatherbitLogo.31316db1.png\";","import { Divider,Header } from \"semantic-ui-react\";\nimport weatherbitLogo from '../assets/weatherbitLogo.png';\n\nfunction AppHeader(){\n\n    return(\n        <>\n         <Header className=\"appHeader\" textAlign=\"center\"  as='h1'>\n        </Header>\n        <img src={weatherbitLogo}></img> \n        <Divider></Divider>\n        </>\n    \n    )\n\n}\n\n\n\nexport default AppHeader;","import {Container, Divider, Header, Image, List, Embed, Grid} from 'semantic-ui-react';\n\n// Renders to view the Current Weather with the props passed down from CurrentWeatherList \n\nfunction CurrentWeather({ weatherCondition, cityName, sunsetTime, currentTemperature, sunriseTime, observedTime}){\n   if (!CurrentWeather) return null\n\n    return(\n        <>\n      \n        <Container>\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n            <Divider></Divider>\n                <Container><Header as=\"h2\">Current Weather in {cityName}: </Header></Container> \n                <Divider></Divider>\n                <Container>Current Weather Condition: {weatherCondition} </Container>\n                <Container>Current Temperature: {currentTemperature} °C 🌡</Container> \n                <Container>Sunrise Time:{sunriseTime} </Container> \n                <Container>Sunset Time: {sunsetTime} </Container> \n                <Container>Weather Last Observed At {observedTime} </Container> \n                <Divider></Divider>\n            </Grid.Column>\n            </Grid>\n        </Container>\n       \n        </>\n    )\n\n\n}\n\n\n\nexport default CurrentWeather;","import CurrentWeather from './CurrentWeather';\n\n// currentWeather is the array stored in the data key of the object from the Weatherbit API\n\nfunction CurrentWeatherList({currentWeather}){\n\n    // return nothing if there is no current weather object, otherwise...\n    if (!currentWeather) return null;\n\n    // Map currentWeather array to access the JSON keys and pass as props for rendering to view\n    const displayCurrentWeather = currentWeather.map(weather => {\n        return <CurrentWeather\n                weatherCondition={weather.weather.description}\n                cityName={weather.city_name}\n                sunsetTime={weather.sunset}\n                sunriseTime={weather.sunrise}\n                currentTemperature={weather.temp}\n                observedTime={weather.ob_time}\n\n                />\n           \n    })\n\n\n    return(\n    \n        <>\n\n        {displayCurrentWeather}\n        \n        </>\n    )\n}\n\n\n\nexport default CurrentWeatherList;","import {Container, Header, Grid} from 'semantic-ui-react';\n\n// Renders to view the Forecast Weather with the props passed down from ForecastWeatherList \n\nfunction ForecastWeather({datetime, weatherCondition,currentTemperature}){\n   if (!datetime) return null\n   \n    return(\n        <>\n         \n        <Container>\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n                <Container><Header as=\"h4\">Date: {datetime} 🗓</Header></Container>\n                <Container>Condition: {weatherCondition} </Container>\n                <Container>Temperature: {currentTemperature} °C 🌡</Container> \n            \n            </Grid.Column>\n            </Grid>\n        </Container>\n        </>\n    )\n\n\n}\n\n\n\nexport default ForecastWeather;","import ForecastWeather from './ForecastWeather';\nimport {Divider, Container, Header} from 'semantic-ui-react';\n\n// forecastWeather is the array stored in the data key of the object from the Weatherbit API\n\nfunction ForecastWeatherList({forecastWeather}){\n\n    // return nothing if there is no current weather object, otherwise...\n    if (!forecastWeather) return null;\n\n    //  The array stored in the \"Data\" key is sliced to pass only the 7 days of forecast info desired \n    const slicedForecastInfo = forecastWeather.slice(0,7);\n\n    // Map forecastWeather array to access the JSON keys now that we have the 7 days needed\n    const displayForecastWeather = slicedForecastInfo.map(weather => {\n \n        return <ForecastWeather\n                datetime={weather.datetime}\n                weatherCondition={weather.weather.description}\n                currentTemperature={weather.temp}\n                />\n           \n    })\n\n    return(\n    \n        <>\n\n<Container><Header as=\"h2\">7 Day Forecast:</Header></Container> \n<Divider></Divider>\n        {displayForecastWeather}\n        \n        </>\n    )\n}\n\n\n\nexport default ForecastWeatherList;","import { Header, Form, Input } from 'semantic-ui-react'\n\nfunction LocationAsCityForm({handleLocationAsCitySubmit, location, setLocation, formatInput}) {\n\n    // handles the text formatted from the search form once it is in the correct format\n    // required by the API\n    const handleInput = (event) => {\n        const formattedInput = formatInput(event.target.value);\n        setLocation(formattedInput);\n\n    }\n\n    const submitLocation = (event) => {\n        event.preventDefault();\n        handleLocationAsCitySubmit(location);\n    \n    }\n    return (\n        <> \n            \n            <Form className=\"form-box\" onSubmit={submitLocation}>\n                             \n                    <Form.Field>\n                    <Header>Find Weather by City Name:</Header>\n                    <Input icon='search' placeholder='e.g. Edinburgh, UK...' onChange={handleInput}/>\n                    </Form.Field>              \n           </Form>\n\n        </>\n    );\n}\n\nexport default LocationAsCityForm;","import { Header, Form, Input } from 'semantic-ui-react'\n\nfunction LocationAsPostcodeForm({handleLocationAsPostcodeSubmit, location, setLocation, formatInput}) {\n\n    // handles the text formatted from the search form once it is in the correct format\n    // required by the API\n    const handleInput = (event) => {\n        const formattedInput = formatInput(event.target.value);\n        setLocation(formattedInput);\n     \n    }\n\n    const submitLocation = (event) => {\n        event.preventDefault();\n        handleLocationAsPostcodeSubmit(location);\n    \n    }\n    return (\n        <> \n            \n            <Form className=\"form-box\" onSubmit={submitLocation}>\n                             \n                    <Form.Field>\n                    <Header>Find Weather by Postcode/Zipcode:</Header>\n                    <Input icon='search' placeholder='e.g. EH10 6JX...' onChange={handleInput}/>\n                    </Form.Field>              \n           </Form>\n\n        </>\n    );\n}\n\nexport default LocationAsPostcodeForm;","\n// location of the back end weather saves\nconst baseURL = 'http://localhost:3000/api/weathersaves/'\n\nexport const getWeathers = () => {\n    return fetch(baseURL)\n        .then(res => res.json())\n}\n\nexport const postWeather = (payload) => {\n    return fetch(baseURL, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' }\n    })\n    .then(res => res.json())\n}\n\nexport const deleteWeather = (id) => {\n    console.log(id);\n    return fetch(baseURL + id, {\n        method: 'DELETE'\n    })\n}\n\n","import { deleteWeather } from \"../WeatherService\"\nimport { Button } from 'semantic-ui-react'\n\nconst WeatherCard = ({weatherSave, removeWeatherSave}) => {\n\n    // invokes a delete of a recemt search from the front end to the back end to ensure persistance\n    const handleDelete = () => {\n        deleteWeather(weatherSave._id).then(()=>{\n            removeWeatherSave(weatherSave._id);\n        })\n    }\n    \n    return (\n        <>\n            \n            <h3>City: {weatherSave.data[0]['city_name']}, {weatherSave.data[0]['country_code']} </h3>\n            <p>Forecast at time of search: {weatherSave.data[0]['weather']['description']}</p>\n            <p>Temperature: {weatherSave.data[0]['temp']} °C 🌡</p>\n            <Button onClick={handleDelete}> Delete 🗑 </Button>\n            \n            <hr></hr>\n        </>\n    )\n}\n\nexport default WeatherCard;","import WeatherCard from \"./WeatherCard\";\nimport { Divider,Header } from \"semantic-ui-react\";\n\nconst WeatherGrid = ({weatherSaves, removeWeatherSave}) => {\n    const weatherSavesList = weatherSaves.map((weatherSave) =>{\n        return <WeatherCard weatherSave={weatherSave} removeWeatherSave={removeWeatherSave} />\n    });\n    \n    return (\n        <>\n        <Header as=\"h2\">Your Recent Weather Location Searches </Header>\n        <Divider></Divider>\n            {weatherSavesList}\n        </>\n    );\n\n}\n\nexport default WeatherGrid;","import { Header, Form, Input } from 'semantic-ui-react'\n\nfunction LocationAsLatLonForm({handleLocationAsLatLonSubmit, location, setLocation, formatInput}) {\n\n    // handles the text formatted from the search form once it is in the correct format\n    // required by the API\n    const handleInput = (event) => {\n        const formattedInput = formatInput(event.target.value);\n        setLocation(formattedInput);\n     \n    }\n\n    const submitLocation = (event) => {\n        event.preventDefault();\n        handleLocationAsLatLonSubmit(location);\n    \n    }\n    return (\n        <> \n            \n            <Form className=\"form-box\" onSubmit={submitLocation}>\n                             \n                    <Form.Field>\n                    <Header>Find Weather by Lat/Lon:</Header>\n                    <Input icon='search'placeholder='e.g. 55.95,-3.18...' onChange={handleInput}/>\n                    </Form.Field>              \n           </Form>\n\n        </>\n    );\n}\n\nexport default LocationAsLatLonForm;","import { useState, useEffect } from \"react\";\nimport CurrentWeatherList from \"../components/CurrentWeatherList\";\nimport ForecastWeather from \"../components/ForecastWeather\";\nimport ForecastWeatherList from \"../components/ForecastWeatherList\";\nimport LocationAsCityForm from \"../components/LocationAsCityForm\";\nimport LocationAsPostcodeForm from \"../components/LocationAsPostcodeForm\";\nimport { Divider} from 'semantic-ui-react';\nimport { getWeathers, postWeather } from \"../WeatherService\";\nimport WeatherGrid from \"../components/WeatherGrid\";\nimport LocationAsLatLonForm from \"../components/LocationAsLatLonForm\";\n\n\nfunction CurrentWeatherContainer(){\n\n    // Sets state for the current weather object which is an array\n    // also sets state for the location input by the user\n    const [currentWeather, setCurrentWeather] = useState([{}]);\n    const [forecastWeather, setForecastWeather] = useState([{}]);\n    const [location, setLocation] = useState(\"\");\n    const [weatherSaves, setWeatherSaves] = useState([]);\n\n    // add a weatherSave object after setting the state of an array to hold\n    // the user search\n    const addWeatherSave = (weatherSave) =>{\n        const temp = weatherSaves.map(s =>s);\n        temp.push(weatherSave);\n        setWeatherSaves(temp);\n      }\n\n    \n    // remove a weatherSave object after setting the state of an array to hold\n    // the user search\n    const removeWeatherSave = (id) => {\n        const temp = weatherSaves.map(s =>s);\n        const indexToDel = temp.map(s => s._id).indexOf(id);\n        console.log(indexToDel);\n    \n        temp.splice(indexToDel, 1);\n        setWeatherSaves(temp);\n    }\n\n    // Trigger a re-render when weather objects from the database need to appear on the front end view\n    useEffect(()=>{\n    getWeathers().then((allWeathers)=>{\n        setWeatherSaves(allWeathers);\n    })\n    }, []);\n\n    \n\n    \n    // handles the location submitted by the \"as city\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsCity\n    const handleLocationAsCitySubmit = (location) => {\n        getCurrentWeatherAsCity(location);\n        getForecastWeatherAsCity(location);\n    } \n\n    // handles the location submitted by the \"as post code\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsPostcodeSubmit= (location) => {\n        getCurrentWeatherAsPostcode(location);\n        getForecastWeatherAsPostcode(location);\n    } \n\n\n    // handles the location submitted by the \"as lat/lon\" form\n    // invokes the fetch passing the location to getCurrentWeatherAsPostcode\n    const handleLocationAsLatLonSubmit= (location) => {\n        getCurrentWeatherAsLatLon(location);\n        getForecastWeatherAsLatLon(location);\n    } \n\n\n\n    // This is the fetch which provides currentWeather by city from the API via location which will be input by the user\n    const getCurrentWeatherAsCity = (location) => {\n    const url = \"https://api.weatherbit.io/v2.0/current?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n    fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            setCurrentWeather(data);\n            // once we have the data from the fetch post this \n            // to the back end\n            postWeather(data).then((returnedData)=>{\n                addWeatherSave(returnedData);\n            })\n          \n        \n        })\n\n    }\n\n      // This is the fetch which provides currentWeather from the API via location which will be input by the user as Lat/Lon\n      const getCurrentWeatherAsLatLon = (location) => {\n        const inputArray = location.split(\",\");\n        const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n       \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setCurrentWeather(data);\n                // once we have the data from the fetch post this \n                // to the back end\n                postWeather(data).then((returnedData)=>{\n                    addWeatherSave(returnedData);\n                })\n              \n            \n            })\n    \n        }\n\n\n     // This is the fetch which provides currentWeather from the API via location set as post code\n     const getCurrentWeatherAsPostcode = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/current?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n        \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setCurrentWeather(data);\n                postWeather(data).then((returnedData)=>{\n                    addWeatherSave(returnedData);\n                })\n                \n            })\n    \n        }\n\n     // This is the fetch which provides forecastWeather from the API via location which will be input by the user\n     const getForecastWeatherAsCity = (location) => {\n        const url = \"https://api.weatherbit.io/v2.0/forecast/daily?city=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n    \n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                setForecastWeather(data);\n               \n               \n            \n            })\n    \n        }\n    \n         // This is the fetch which provides forecastWeather from the API via location set as post code\n         const getForecastWeatherAsPostcode = (location) => {\n            const url = \"https://api.weatherbit.io/v2.0/forecast/daily?postal_code=\"+location+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n            \n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n        // This is the fetch which provides forecastWeather from the API via location set as post code\n        // location is still a string here i think and it isn't receiving the proper formatted array?\n        const getForecastWeatherAsLatLon = (location) => {\n            const inputArray = location.split(\",\");\n            const url = \"https://api.weatherbit.io/v2.0/current?lat=\"+inputArray[0]+\"&lon=\"+inputArray[1]+\"&key=42f951c1eea94e33a68cd790a1f613fb\"\n\n            fetch(url)\n                .then(res => res.json())\n                .then(data => {\n                    setForecastWeather(data);\n                })\n        \n            }\n\n\n    // Format the user input to the form\n    // Pseudocode to format user input for the API\n    // Convert string to lower case\n    // Convert string to array with comma delimiter - .split(“,”)\n    // For each element in the array, get rid of leading and trailing white space - .trim()\n    // For each element in the array, replace any space with an underscore - .replace(“ “, “_”)\n    // Convert the array back to a string\n    \n    const formatInput = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        const formattedString = upperCase;\n        return formattedString;\n    }\n\n    const formatInputLatLon = (userInput) => {\n        const upperCase = userInput.toUpperCase();\n        const inputArray = upperCase.split(\",\");\n        const formattedArray = inputArray.map(i => i.trim());\n        const formattedString = formattedArray;\n        return formattedString;\n        \n    }\n\n    // pass state down to the respective components from the API fetch and after input handling\n    return(\n        <>\n        <LocationAsCityForm \n        handleLocationAsCitySubmit={handleLocationAsCitySubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsPostcodeForm \n        handleLocationAsPostcodeSubmit={handleLocationAsPostcodeSubmit}\n        location={location}\n        setLocation={setLocation}\n        formatInput={formatInput}\n        />\n\n        <LocationAsLatLonForm \n          handleLocationAsLatLonSubmit={handleLocationAsLatLonSubmit}\n          location={location.toString()}\n          setLocation={setLocation}\n          formatInput={formatInputLatLon}/>\n        \n        {/* Passes the array associated with the data key to currentWeatherList as props */}\n        <CurrentWeatherList \n        location={location}\n        currentWeather={currentWeather.data}\n        />\n\n        \n        <ForecastWeatherList \n        location={location}\n        forecastWeather={forecastWeather.data}\n        />\n\n        \n        <Divider>\n            <ForecastWeather />\n        </Divider>\n\n        <WeatherGrid weatherSaves={weatherSaves} removeWeatherSave={removeWeatherSave}/>\n\n       \n\n        </>\n    )\n\n\n}\n\n\nexport default CurrentWeatherContainer;","\nimport {Container, Grid} from 'semantic-ui-react';\nimport AppHeader from './components/AppHeader';\nimport CurrentWeatherContainer from \"./containers/CurrentWeatherContainer\";\n\n\nfunction App() {\n  return (\n  <>\n     <Container className=\"App\">\n            <Grid>\n            <Grid.Column textAlign=\"center\">\n                <AppHeader />\n                <CurrentWeatherContainer />\n            </Grid.Column>\n            </Grid>\n        </Container>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}